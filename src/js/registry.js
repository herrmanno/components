/// <reference path="options"/>
var ho;
(function (ho) {
    var components;
    (function (components) {
        var Registry = (function () {
            function Registry(options) {
                this.components = [];
                this.options = new components.RegistryOptions(options);
            }
            Registry.prototype.register = function (c) {
                this.components.push(c);
                document.createElement(c.name);
            };
            Registry.prototype.run = function () {
                var _this = this;
                this.components.forEach(function (c) {
                    _this.initComponent(c);
                });
            };
            Registry.prototype.initComponent = function (component, element) {
                if (element === void 0) { element = document; }
                Array.prototype.forEach.call(element.querySelectorAll(component.name), function (e) {
                    new component(e);
                });
            };
            Registry.prototype.initElement = function (element) {
                var _this = this;
                this.components.forEach(function (component) {
                    _this.initComponent(component, element);
                });
            };
            Registry.prototype.hasComponent = function (name) {
                return this.components
                    .filter(function (component) {
                    return component.name === name;
                }).length > 0;
            };
            Registry.prototype.loadComponent = function (name) {
                return this.options.componentProvider.getComponent(name);
            };
            Registry.prototype.render = function (component) {
                this.options.renderer.render(component);
            };
            return Registry;
        })();
        components.Registry = Registry;
    })(components = ho.components || (ho.components = {}));
})(ho || (ho = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVnaXN0cnkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi90cy9yZWdpc3RyeS50cyJdLCJuYW1lcyI6WyJobyIsImhvLmNvbXBvbmVudHMiLCJoby5jb21wb25lbnRzLlJlZ2lzdHJ5IiwiaG8uY29tcG9uZW50cy5SZWdpc3RyeS5jb25zdHJ1Y3RvciIsImhvLmNvbXBvbmVudHMuUmVnaXN0cnkucmVnaXN0ZXIiLCJoby5jb21wb25lbnRzLlJlZ2lzdHJ5LnJ1biIsImhvLmNvbXBvbmVudHMuUmVnaXN0cnkuaW5pdENvbXBvbmVudCIsImhvLmNvbXBvbmVudHMuUmVnaXN0cnkuaW5pdEVsZW1lbnQiLCJoby5jb21wb25lbnRzLlJlZ2lzdHJ5Lmhhc0NvbXBvbmVudCIsImhvLmNvbXBvbmVudHMuUmVnaXN0cnkubG9hZENvbXBvbmVudCIsImhvLmNvbXBvbmVudHMuUmVnaXN0cnkucmVuZGVyIl0sIm1hcHBpbmdzIjoiQUFBQSwrQkFBK0I7QUFFL0IsSUFBTyxFQUFFLENBbURSO0FBbkRELFdBQU8sRUFBRTtJQUFDQSxJQUFBQSxVQUFVQSxDQW1EbkJBO0lBbkRTQSxXQUFBQSxVQUFVQSxFQUFDQSxDQUFDQTtRQUVsQkM7WUFNSUMsa0JBQVlBLE9BQWFBO2dCQUhqQkMsZUFBVUEsR0FBNEJBLEVBQUVBLENBQUNBO2dCQUk3Q0EsSUFBSUEsQ0FBQ0EsT0FBT0EsR0FBR0EsSUFBSUEsMEJBQWVBLENBQUNBLE9BQU9BLENBQUNBLENBQUNBO1lBQ2hEQSxDQUFDQTtZQUVNRCwyQkFBUUEsR0FBZkEsVUFBZ0JBLENBQW1CQTtnQkFDL0JFLElBQUlBLENBQUNBLFVBQVVBLENBQUNBLElBQUlBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO2dCQUN4QkEsUUFBUUEsQ0FBQ0EsYUFBYUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0E7WUFDbkNBLENBQUNBO1lBRU1GLHNCQUFHQSxHQUFWQTtnQkFBQUcsaUJBSUNBO2dCQUhHQSxJQUFJQSxDQUFDQSxVQUFVQSxDQUFDQSxPQUFPQSxDQUFDQSxVQUFDQSxDQUFDQTtvQkFDdEJBLEtBQUlBLENBQUNBLGFBQWFBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO2dCQUMxQkEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDUEEsQ0FBQ0E7WUFFTUgsZ0NBQWFBLEdBQXBCQSxVQUFxQkEsU0FBMkJBLEVBQUVBLE9BQXFDQTtnQkFBckNJLHVCQUFxQ0EsR0FBckNBLGtCQUFxQ0E7Z0JBQ25GQSxLQUFLQSxDQUFDQSxTQUFTQSxDQUFDQSxPQUFPQSxDQUFDQSxJQUFJQSxDQUFDQSxPQUFPQSxDQUFDQSxnQkFBZ0JBLENBQUNBLFNBQVNBLENBQUNBLElBQUlBLENBQUNBLEVBQUVBLFVBQVNBLENBQUNBO29CQUN6RixJQUFJLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDbEIsQ0FBQyxDQUFDQSxDQUFDQTtZQUNFQSxDQUFDQTtZQUVNSiw4QkFBV0EsR0FBbEJBLFVBQW1CQSxPQUFvQkE7Z0JBQXZDSyxpQkFJQ0E7Z0JBSEdBLElBQUlBLENBQUNBLFVBQVVBLENBQUNBLE9BQU9BLENBQUNBLFVBQUNBLFNBQVNBO29CQUM5QkEsS0FBSUEsQ0FBQ0EsYUFBYUEsQ0FBQ0EsU0FBU0EsRUFBRUEsT0FBT0EsQ0FBQ0EsQ0FBQ0E7Z0JBQzNDQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUNQQSxDQUFDQTtZQUVNTCwrQkFBWUEsR0FBbkJBLFVBQW9CQSxJQUFZQTtnQkFDNUJNLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLFVBQVVBO3FCQUNqQkEsTUFBTUEsQ0FBQ0EsVUFBQ0EsU0FBU0E7b0JBQ2RBLE1BQU1BLENBQUNBLFNBQVNBLENBQUNBLElBQUlBLEtBQUtBLElBQUlBLENBQUNBO2dCQUNuQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsTUFBTUEsR0FBR0EsQ0FBQ0EsQ0FBQ0E7WUFDdEJBLENBQUNBO1lBRU1OLGdDQUFhQSxHQUFwQkEsVUFBcUJBLElBQVlBO2dCQUM3Qk8sTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsaUJBQWlCQSxDQUFDQSxZQUFZQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFBQTtZQUM1REEsQ0FBQ0E7WUFFTVAseUJBQU1BLEdBQWJBLFVBQWNBLFNBQW9CQTtnQkFDOUJRLElBQUlBLENBQUNBLE9BQU9BLENBQUNBLFFBQVFBLENBQUNBLE1BQU1BLENBQUNBLFNBQVNBLENBQUNBLENBQUNBO1lBQzVDQSxDQUFDQTtZQUVMUixlQUFDQTtRQUFEQSxDQUFDQSxBQWhEREQsSUFnRENBO1FBaERZQSxtQkFBUUEsV0FnRHBCQSxDQUFBQTtJQUNMQSxDQUFDQSxFQW5EU0QsVUFBVUEsR0FBVkEsYUFBVUEsS0FBVkEsYUFBVUEsUUFtRG5CQTtBQUFEQSxDQUFDQSxFQW5ETSxFQUFFLEtBQUYsRUFBRSxRQW1EUiIsInNvdXJjZXNDb250ZW50IjpbIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCJvcHRpb25zXCIvPlxuXG5tb2R1bGUgaG8uY29tcG9uZW50cyB7XG5cbiAgICBleHBvcnQgY2xhc3MgUmVnaXN0cnkge1xuXG4gICAgICAgIHByaXZhdGUgb3B0aW9uczogUmVnaXN0cnlPcHRpb25zO1xuICAgICAgICBwcml2YXRlIGNvbXBvbmVudHM6IEFycmF5PHR5cGVvZiBDb21wb25lbnQ+ID0gW107XG5cblxuICAgICAgICBjb25zdHJ1Y3RvcihvcHRpb25zPzogYW55KSB7XG4gICAgICAgICAgICB0aGlzLm9wdGlvbnMgPSBuZXcgUmVnaXN0cnlPcHRpb25zKG9wdGlvbnMpO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIHJlZ2lzdGVyKGM6IHR5cGVvZiBDb21wb25lbnQpOiB2b2lkIHtcbiAgICAgICAgICAgIHRoaXMuY29tcG9uZW50cy5wdXNoKGMpO1xuICAgICAgICAgICAgZG9jdW1lbnQuY3JlYXRlRWxlbWVudChjLm5hbWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIHJ1bigpOiB2b2lkIHtcbiAgICAgICAgICAgIHRoaXMuY29tcG9uZW50cy5mb3JFYWNoKChjKT0+e1xuICAgICAgICAgICAgICAgIHRoaXMuaW5pdENvbXBvbmVudChjKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIGluaXRDb21wb25lbnQoY29tcG9uZW50OiB0eXBlb2YgQ29tcG9uZW50LCBlbGVtZW50OkhUTUxFbGVtZW50fERvY3VtZW50PWRvY3VtZW50KTogdm9pZCB7XG4gICAgICAgICAgICBBcnJheS5wcm90b3R5cGUuZm9yRWFjaC5jYWxsKGVsZW1lbnQucXVlcnlTZWxlY3RvckFsbChjb21wb25lbnQubmFtZSksIGZ1bmN0aW9uKGUpIHtcblx0XHRcdFx0bmV3IGNvbXBvbmVudChlKTtcblx0XHRcdH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIGluaXRFbGVtZW50KGVsZW1lbnQ6IEhUTUxFbGVtZW50KTogdm9pZCB7XG4gICAgICAgICAgICB0aGlzLmNvbXBvbmVudHMuZm9yRWFjaCgoY29tcG9uZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5pbml0Q29tcG9uZW50KGNvbXBvbmVudCwgZWxlbWVudCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBoYXNDb21wb25lbnQobmFtZTogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jb21wb25lbnRzXG4gICAgICAgICAgICAgICAgLmZpbHRlcigoY29tcG9uZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjb21wb25lbnQubmFtZSA9PT0gbmFtZTtcbiAgICAgICAgICAgICAgICB9KS5sZW5ndGggPiAwO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIGxvYWRDb21wb25lbnQobmFtZTogc3RyaW5nKTogUHJvbWlzZSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5vcHRpb25zLmNvbXBvbmVudFByb3ZpZGVyLmdldENvbXBvbmVudChuYW1lKVxuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIHJlbmRlcihjb21wb25lbnQ6IENvbXBvbmVudCk6IHZvaWQge1xuICAgICAgICAgICAgdGhpcy5vcHRpb25zLnJlbmRlcmVyLnJlbmRlcihjb21wb25lbnQpO1xuICAgICAgICB9XG5cbiAgICB9XG59XG4iXX0=