/// <reference path="./registry"/>
/// <reference path="../../bower_components/ho-promise/dist/d.ts/promise.d.ts"/>
var Promise = ho.promise.Promise;
var ho;
(function (ho) {
    var components;
    (function (components) {
        var Component = (function () {
            function Component(element) {
                var _this = this;
                this.original_innerHTML = undefined;
                this.properties = [];
                this.requires = [];
                //------- init Elemenet and Elements' originla innerHTML
                this.element = element;
                this.element.component = this;
                this.original_innerHTML = element.innerHTML;
                //-------- init Properties
                this.initProperties();
                //------- call init() & loadRequirements() -> then render
                var ready = [this.init(), this.loadRequirements()];
                Promise.all(ready)
                    .then(function () {
                    _this.render();
                })
                    .catch(function (err) {
                    throw err;
                });
            }
            Component.prototype.init = function () { return new Promise(function (resolve) { resolve(); }); };
            Component.prototype.update = function () { return void 0; };
            Component.prototype.render = function () {
                Component.registry.render(this);
                this.update();
                //this.initChildren();
                Component.registry.initElement(this.element);
            };
            ;
            Component.prototype.initProperties = function () {
                var _this = this;
                this.properties = this.properties.map(function (prop) {
                    return _this.element[prop] || _this.element.getAttribute(prop);
                });
            };
            Component.prototype.loadRequirements = function () {
                var promises = this.requires
                    .filter(function (req) {
                    return !Component.registry.hasComponent(req);
                })
                    .map(function (req) {
                    return Component.registry.loadComponent(req);
                });
                return Promise.all(promises);
            };
            ;
            Component.register = function (c) {
                Component.registry.register(c);
            };
            Component.run = function (opt) {
                Component.registry = new components.Registry(opt);
                Component.registry.run();
            };
            return Component;
        })();
        components.Component = Component;
    })(components = ho.components || (ho.components = {}));
})(ho || (ho = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcG9uZW50cy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3RzL2NvbXBvbmVudHMudHMiXSwibmFtZXMiOlsiaG8iLCJoby5jb21wb25lbnRzIiwiaG8uY29tcG9uZW50cy5Db21wb25lbnQiLCJoby5jb21wb25lbnRzLkNvbXBvbmVudC5jb25zdHJ1Y3RvciIsImhvLmNvbXBvbmVudHMuQ29tcG9uZW50LmluaXQiLCJoby5jb21wb25lbnRzLkNvbXBvbmVudC51cGRhdGUiLCJoby5jb21wb25lbnRzLkNvbXBvbmVudC5yZW5kZXIiLCJoby5jb21wb25lbnRzLkNvbXBvbmVudC5pbml0UHJvcGVydGllcyIsImhvLmNvbXBvbmVudHMuQ29tcG9uZW50LmxvYWRSZXF1aXJlbWVudHMiLCJoby5jb21wb25lbnRzLkNvbXBvbmVudC5yZWdpc3RlciIsImhvLmNvbXBvbmVudHMuQ29tcG9uZW50LnJ1biJdLCJtYXBwaW5ncyI6IkFBRUEsQUFGQSxrQ0FBa0M7QUFDbEMsZ0ZBQWdGO0FBQ2hGLElBQU8sT0FBTyxHQUFHLEVBQUUsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDO0FBRXBDLElBQU8sRUFBRSxDQTRFUjtBQTVFRCxXQUFPLEVBQUU7SUFBQ0EsSUFBQUEsVUFBVUEsQ0E0RW5CQTtJQTVFU0EsV0FBQUEsVUFBVUEsRUFBQ0EsQ0FBQ0E7UUFFbEJDO1lBVUlDLG1CQUFZQSxPQUFvQkE7Z0JBVnBDQyxpQkF5RUNBO2dCQXZFR0EsdUJBQWtCQSxHQUFXQSxTQUFTQSxDQUFDQTtnQkFFdkNBLGVBQVVBLEdBQWtCQSxFQUFFQSxDQUFDQTtnQkFDL0JBLGFBQVFBLEdBQWtCQSxFQUFFQSxDQUFDQTtnQkFPekJBLEFBREFBLHdEQUF3REE7Z0JBQ3hEQSxJQUFJQSxDQUFDQSxPQUFPQSxHQUFHQSxPQUFPQSxDQUFDQTtnQkFDdkJBLElBQUlBLENBQUNBLE9BQU9BLENBQUNBLFNBQVNBLEdBQUdBLElBQUlBLENBQUNBO2dCQUM5QkEsSUFBSUEsQ0FBQ0Es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Q0E7UUFBREEsQ0FBQ0EsQUF6RURELElBeUVDQTtRQXpFWUEsb0JBQVNBLFlBeUVyQkEsQ0FBQUE7SUFDTEEsQ0FBQ0EsRUE1RVNELFVBQVVBLEdBQVZBLGFBQVVBLEtBQVZBLGFBQVVBLFFBNEVuQkE7QUFBREEsQ0FBQ0EsRUE1RU0sRUFBRSxLQUFGLEVBQUUsUUE0RVIiLCJzb3VyY2VzQ29udGVudCI6WyIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi9yZWdpc3RyeVwiLz5cbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi8uLi9ib3dlcl9jb21wb25lbnRzL2hvLXByb21pc2UvZGlzdC9kLnRzL3Byb21pc2UuZC50c1wiLz5cbmltcG9ydCBQcm9taXNlID0gaG8ucHJvbWlzZS5Qcm9taXNlO1xuXG5tb2R1bGUgaG8uY29tcG9uZW50cyB7XG5cbiAgICBleHBvcnQgY2xhc3MgQ29tcG9uZW50IHtcbiAgICAgICAgZWxlbWVudDogYW55O1xuICAgICAgICBvcmlnaW5hbF9pbm5lckhUTUw6IHN0cmluZyA9IHVuZGVmaW5lZDtcbiAgICAgICAgaHRtbDogc3RyaW5nO1xuICAgICAgICBwcm9wZXJ0aWVzOiBBcnJheTxzdHJpbmc+ID0gW107XG4gICAgICAgIHJlcXVpcmVzOiBBcnJheTxzdHJpbmc+ID0gW107XG5cbiAgICAgICAgc3RhdGljIHJlZ2lzdHJ5OiBSZWdpc3RyeTtcbiAgICAgICAgc3RhdGljIG5hbWU6IHN0cmluZztcblxuICAgICAgICBjb25zdHJ1Y3RvcihlbGVtZW50OiBIVE1MRWxlbWVudCkge1xuICAgICAgICAgICAgLy8tLS0tLS0tIGluaXQgRWxlbWVuZXQgYW5kIEVsZW1lbnRzJyBvcmlnaW5sYSBpbm5lckhUTUxcbiAgICAgICAgICAgIHRoaXMuZWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgICAgICAgICB0aGlzLmVsZW1lbnQuY29tcG9uZW50ID0gdGhpcztcbiAgICAgICAgICAgIHRoaXMub3JpZ2luYWxfaW5uZXJIVE1MID0gZWxlbWVudC5pbm5lckhUTUw7XG5cbiAgICAgICAgICAgIC8vLS0tLS0tLS0gaW5pdCBQcm9wZXJ0aWVzXG4gICAgICAgICAgICB0aGlzLmluaXRQcm9wZXJ0aWVzKCk7XG5cbiAgICAgICAgICAgIC8vLS0tLS0tLSBjYWxsIGluaXQoKSAmIGxvYWRSZXF1aXJlbWVudHMoKSAtPiB0aGVuIHJlbmRlclxuICAgICAgICAgICAgbGV0IHJlYWR5ID0gW3RoaXMuaW5pdCgpLCB0aGlzLmxvYWRSZXF1aXJlbWVudHMoKV07XG4gICAgICAgICAgICBQcm9taXNlLmFsbChyZWFkeSlcbiAgICAgICAgICAgIC50aGVuKCgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLnJlbmRlcigpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5jYXRjaCgoZXJyKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgaW5pdCgpOiBQcm9taXNlIHtyZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpPT57cmVzb2x2ZSgpO30pO31cblxuICAgICAgICBwdWJsaWMgdXBkYXRlKCk6IHZvaWQge3JldHVybiB2b2lkIDA7fVxuXG4gICAgICAgIHB1YmxpYyByZW5kZXIoKTogdm9pZCB7XG4gICAgXHRcdENvbXBvbmVudC5yZWdpc3RyeS5yZW5kZXIodGhpcyk7XG5cblx0XHRcdHRoaXMudXBkYXRlKCk7XG5cbiAgICBcdFx0Ly90aGlzLmluaXRDaGlsZHJlbigpO1xuXG4gICAgXHRcdENvbXBvbmVudC5yZWdpc3RyeS5pbml0RWxlbWVudCh0aGlzLmVsZW1lbnQpO1xuICAgIFx0fTtcblxuXG4gICAgICAgIHByaXZhdGUgaW5pdFByb3BlcnRpZXMoKTogdm9pZCB7XG4gICAgICAgICAgICB0aGlzLnByb3BlcnRpZXMgPSB0aGlzLnByb3BlcnRpZXMubWFwKChwcm9wKSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZWxlbWVudFtwcm9wXSB8fCB0aGlzLmVsZW1lbnQuZ2V0QXR0cmlidXRlKHByb3ApO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBwcml2YXRlIGxvYWRSZXF1aXJlbWVudHMoKSB7XG4gICAgXHRcdGxldCBwcm9taXNlcyA9IHRoaXMucmVxdWlyZXNcbiAgICAgICAgICAgIC5maWx0ZXIoKHJlcSkgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiAhQ29tcG9uZW50LnJlZ2lzdHJ5Lmhhc0NvbXBvbmVudChyZXEpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5tYXAoKHJlcSkgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiBDb21wb25lbnQucmVnaXN0cnkubG9hZENvbXBvbmVudChyZXEpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLmFsbChwcm9taXNlcyk7XG4gICAgXHR9O1xuXG4gICAgICAgIHN0YXRpYyByZWdpc3RlcihjOiB0eXBlb2YgQ29tcG9uZW50KTogdm9pZCB7XG4gICAgICAgICAgICBDb21wb25lbnQucmVnaXN0cnkucmVnaXN0ZXIoYyk7XG4gICAgICAgIH1cblxuICAgICAgICBzdGF0aWMgcnVuKG9wdD86IGFueSkge1xuICAgICAgICAgICAgQ29tcG9uZW50LnJlZ2lzdHJ5ID0gbmV3IFJlZ2lzdHJ5KG9wdCk7XG4gICAgICAgICAgICBDb21wb25lbnQucmVnaXN0cnkucnVuKCk7XG4gICAgICAgIH1cblxuXG4gICAgfVxufVxuIl19